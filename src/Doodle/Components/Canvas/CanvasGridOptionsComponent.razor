@inherits Shared.DoodleBaseComponent

<div data-toolbarmenu-canvasgridcomponent="@DataAttributeName" class="toolbar-panels @Theme.ToolbarContentPanelsClass" @attributes="AdditionalAttributes"> 
    
    <div class="toolbar-panel @Theme.ToolbarContentPanelClass">
        <div class="toolbar-panel-header @Theme.ToolbarContentPanelHeaderClass">
            <span class="toolbar-panel-header-text @Theme.ToolbarContentPanelHeaderTextClass">Grid Type</span>
        </div>
        
        <div class="toolbar-panel-content @Theme.ToolbarContentPanelContentClass ">
            <div data-toolbarmenu-canvasgridcomponent-menutype="@DataAttributeName" class="toolbar-panel-content-wrapper @Theme.ToolbarContentPanelContentWrapperClass content-grid-type">
                <div>
                    <input type="radio" name="grid_type" value="none" id="grid_type-none" 
                        checked="@(DoodleDrawInteraction.GridType == GridType.None)" 
                        @onchange="@((e) => DoodleDrawInteraction.SetCanvasGridType(GridType.None))" />
                    <label for="grid_type-none">
                        <span class="material-icons">check_box_outline_blank</span>
                        None
                    </label>
                </div>

                <div>
                  <input type="radio" name="grid_type" value="point" id="grid_type-point" 
                        checked="@(DoodleDrawInteraction.GridType == GridType.Point)"
                        @onchange="@((e) => DoodleDrawInteraction.SetCanvasGridType(GridType.Point))" />
                    <label for="grid_type-point">
                        <span class="material-icons">apps</span>
                        Point
                    </label>
                </div>

                <div>
                  <input type="radio" name="grid_type" value="line" id="grid_type-line" 
                        checked="@(DoodleDrawInteraction.GridType == GridType.Grid)"
                        @onchange="@((e) => DoodleDrawInteraction.SetCanvasGridType(GridType.Grid))" />
                    <label for="grid_type-line">
                        <span class="material-icons">window</span>
                        Line
                    </label>
                </div>
            </div>
        </div>
    </div>
    <div class="toolbar-panel @Theme.ToolbarContentPanelClass">
        <div class="toolbar-panel-header @Theme.ToolbarContentPanelHeaderClass">
            <span class="toolbar-panel-header-text @Theme.ToolbarContentPanelHeaderTextClass">Grid Size</span>
        </div>

        <div class="toolbar-panel-content @Theme.ToolbarContentPanelContentClass content-grid-size"> 
            <div data-toolbarmenu-canvasgridcomponent-menugridsize="@DataAttributeName" class="toolbar-panel-content-wrapper @Theme.ToolbarContentPanelContentWrapperClass">
                <button class="toolbar-button @Theme.ToolbarMenuButtonClass btn-canvasgridcomponent-decrease" title="Decrease"
                        @onclick="@(() => DoodleDrawInteraction.SetCanvasGridSize(DoodleDrawInteraction.GridSize - 5))"> 
                        <span class="material-icons">remove_circle_outline</span>
                </button>

                <label class="indicator-label">@DoodleDrawInteraction.GridSize </label>

                <button class="toolbar-button @Theme.ToolbarMenuButtonClass btn-canvasgridcomponent-increase" title="Increase"
                        @onclick="@(() => DoodleDrawInteraction.SetCanvasGridSize(DoodleDrawInteraction.GridSize + 5))"> 
                        <span class="material-icons">add_circle_outline</span>
                </button>
            </div>
        </div>

    </div>
    <div class="toolbar-panel @Theme.ToolbarContentPanelClass">
        <div class="toolbar-panel-header @Theme.ToolbarContentPanelHeaderClass">
            <span class="toolbar-panel-header-text @Theme.ToolbarContentPanelHeaderTextClass">Grid Color</span>
        </div>
        <div class="toolbar-panel-content @Theme.ToolbarContentPanelContentClass content-grid-color">
            <div data-toolbarmenu-canvasgridcomponent-menugridcolor="@DataAttributeName" class="toolbar-panel-content-wrapper @Theme.ToolbarContentPanelContentWrapperClass">
                <button class="toolbar-button @Theme.ToolbarMenuButtonClass btn-canvasgridcomponent-pickcolor" title="Pick Color"
                        @onclick="@(() => OpenColorPicker())"> 
                    <span class="material-icons" style="color: @DoodleDrawInteraction.GridColor;">format_color_fill</span>
                </button>
                <input @ref="ColorPicker" type="color" value="@DoodleDrawInteraction.GridColor" @onchange="@((e) => DoodleDrawInteraction.SetCanvasGridColor(e.Value.ToString()))" />
            </div>
        </div>
    </div>
    <div class="toolbar-panel @Theme.ToolbarContentPanelClass">
        <div class="toolbar-panel-header @Theme.ToolbarContentPanelHeaderClass">
            <span class="toolbar-panel-header-text @Theme.ToolbarContentPanelHeaderTextClass">Close</span>
        </div>

        <div class="toolbar-panel-content @Theme.ToolbarContentPanelContentClass content-close">
            <div data-toolbarmenu-canvasgridcomponent-menuclose="@DataAttributeName" class="toolbar-panel-content-wrapper @Theme.ToolbarContentPanelContentWrapperClass">
                <button class="toolbar-button @Theme.ToolbarMenuButtonClass btn-cavasgridcomponent-close" title="Close"
                        @onclick="@(() => OnCloseMenu.InvokeAsync())"> 
                    <span class="material-icons toolbar-close @Theme.ToolbarContentPanelContentCloseClass">close</span>
                </button>
            </div>
        </div>
    </div>
</div>