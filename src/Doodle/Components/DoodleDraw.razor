<div class="doodle-draw-wrapper" data-doodle-draw="@DataAttributeName">
    <div class="doodle-draw-header" data-doodle-draw-header="@DataAttributeName">
        <DoodleToolbar UndoButtonEnabled="@(DoodleCanvas?.CanUndo ?? false)" RedoButtonEnabled="@(DoodleCanvas?.CanRedo ?? false)"
            ExportButtonEnabled="true" SaveButtonEnabled="@(DoodleCanvas?.Dirty ?? false)" ClearButtonEnabled="@(DoodleCanvas?.Dirty ?? false)"
            ClearHistoryOnClear="true" UndoButtonClick="@(async() => await DoodleCanvas.Undo())" RedoButtonClick="@(async() => await DoodleCanvas.Redo())"
            ClearButtonClick="@(async(c) => await DoodleCanvas.ClearCanvas(c))" ExportButtonClick="@(async() => await ExportDoodleToImage())"></DoodleToolbar>
        <div class="splitter"></div>
        <DoodleColorPicker 
            SelectedColor="@StrokeColor" 
            SelectedColorChanged="@((color) => this.StrokeColor = color)"
            Options="@Options"
            DataAttributeName="@DataAttributeName"></DoodleColorPicker> 
        <div class="splitter"></div>
        <DoodleSizePicker 
           SelectedSize="@StrokeSize"
           SelectedSizeChanged="@((size) => this.StrokeSize = size)"
           DataAttributeName="@DataAttributeName"></DoodleSizePicker>    
    </div>
    <div class="doodle-draw-body" data-doodle-draw-body="@DataAttributeName">

        <div class="doodle-draw-left-panel">

        </div>

        <div @ref="RenderWrapper" class="doodle-draw-content" >

            @if (Backgrounds != null && Backgrounds.Count() > 0)
            {
                foreach (var background in Backgrounds)
                {
                    <DoodleBackground BackgroundSource="@background"></DoodleBackground>
                }
            }

            <DoodleResizableContainer>
                <DoodleResizableElement Top="50" Left="50" Height="50" Width="50">
                    <img height="100%" width="100%" src="./_content/STDoodle/img/svg2.svg" />
                </DoodleResizableElement>

                <DoodleResizableElement Top="150" Left="150" Height="50" Width="50">
                    <span>This is a text element that should be displayed</span>
                </DoodleResizableElement>

            </DoodleResizableContainer>

            <DoodleCanvas 
                DataAttributeName="@DataAttributeName" 
                StrokeColor="@StrokeColor" 
                Options="@Options"
                StrokeSize="@StrokeSize"
                OnCommandPathsUpdated="@(() => StateHasChanged())"
                @ref="DoodleCanvas"></DoodleCanvas>
        </div>

        <div class="doodle-draw-right-panel"></div>
    </div>

</div>

<div style="height: 200px; width:200px; background-image: url('@imgSource');" ></div>


