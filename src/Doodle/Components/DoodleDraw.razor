<CascadingValue Value="DataAttributeName" Name="DataAttributeName">
    <CascadingValue Value="Options" Name="Options">
        <CascadingValue Value="DoodleDrawInteraction" Name="DoodleDrawInteraction">


            <div class="doodle-draw-wrapper" data-doodle-draw="@DataAttributeName">
                <div class="doodle-draw-header" data-doodle-draw-header="@DataAttributeName">
                    <DoodleToolbar UndoButtonEnabled="@(DoodleCanvas?.CanUndo ?? false)" RedoButtonEnabled="@(DoodleCanvas?.CanRedo ?? false)"
                        ExportButtonEnabled="true" SaveButtonEnabled="@(DoodleCanvas?.Dirty ?? false)" ClearButtonEnabled="@(DoodleCanvas?.Dirty ?? false)"
                        ClearHistoryOnClear="true" UndoButtonClick="@(async() => await DoodleCanvas.Undo())" RedoButtonClick="@(async() => await DoodleCanvas.Redo())"
                        ClearButtonClick="@(async(c) => await DoodleCanvas.ClearCanvas(c))" ExportButtonClick="@(async() => await ExportDoodleToImage())"></DoodleToolbar>
                    <div class="splitter"></div>
     

                    <Doodle.Components.Toolbar.BackgroundPicker.BackgroundPickerComponent></Doodle.Components.Toolbar.BackgroundPicker.BackgroundPickerComponent>

                    <Doodle.Components.Toolbar.ColorPicker.ColorPickerComponent>

                    </Doodle.Components.Toolbar.ColorPicker.ColorPickerComponent>

                    <button @onclick="@((e) => IsResizableContainerActive = true)">Text</button>           
                    <button @onclick="@((e) => IsResizableContainerActive = false)">Draw</button>           
                </div>
                <div class="doodle-draw-body" data-doodle-draw-body="@DataAttributeName">
                    <div @ref="RenderWrapper" class="doodle-draw-content" >

                        @if (DoodleDrawInteraction.SelectedBackgrounds != null && DoodleDrawInteraction.SelectedBackgrounds.Count() > 0)
                        {
                            foreach (var background in DoodleDrawInteraction.SelectedBackgrounds)
                            {
                                <Doodle.Components.Background.BackgroundSourceComponent BackgroundSource="@background" IsPreview="false">
                                </Doodle.Components.Background.BackgroundSourceComponent>
                            }
                        }
                        
                        <Doodle.Components.Resizable.ResizableListComponent
                            Active="@IsResizableContainerActive"></Doodle.Components.Resizable.ResizableListComponent>

                        <DoodleCanvas 
                            
                            OnCommandPathsUpdated="@(() => StateHasChanged())"
                            @ref="DoodleCanvas"></DoodleCanvas>
                    </div>
                </div>
            </div>


        </CascadingValue>
    </CascadingValue>
</CascadingValue>



<div style="height: 400px; width:400px; background-image: url('@imgSource');" ></div>


