<div class="doodle-draw-wrapper">
    <div class="doodle-draw-header">
        <DoodleColorPicker 
            SelectedColor="@StrokeColor" 
            SelectedColorChanged="@((color) => this.StrokeColor = color)"
            Options="@Options"
            E2ETestingName="@E2ETestingName"></DoodleColorPicker> 

        <DoodleSizePicker 
           SelectedSize="@StrokeSize"
           SelectedSizeChanged="@((size) => this.StrokeSize = size)"
           E2ETestingName="@E2ETestingName"></DoodleSizePicker>    
    </div>
    <div class="doodle-draw-body">

        <div class="doodle-draw-left-panel">
            <button disabled=@(!DoodleCanvas?.CanUndo ?? true) @onclick="@(async () => await DoodleCanvas.Undo())">Undo</button>
            <button disabled=@(!DoodleCanvas?.CanRedo ?? true) @onclick="@(async () => await DoodleCanvas.Redo())">Redo</button>
            <button @onclick="@(async () => await DoodleCanvas.ClearCanvas(false))">Clear</button>
            <button @onclick="@(async () => await DoodleCanvas.ClearCanvas(true))">Clear History</button>
            <button @onclick="@(async () => await DoodleCanvas.Redraw())">Refresh</button>
            <button>Get Commands</button>
            <button>Set Commands</button>
        </div>

        <div @ref="RenderWrapper" class="doodle-draw-content" >
            <DoodleCanvas 
                E2ETestingName="@E2ETestingName" 
                StrokeColor="@StrokeColor" 
                Options="@Options"
                StrokeSize="@StrokeSize"
                OnCommandPathsUpdated="@(() => StateHasChanged())"
                @ref="DoodleCanvas"></DoodleCanvas>
        </div>

        <div class="doodle-draw-right-panel"></div>
    </div>

</div>

<div style="height: 200px; width:200px; background-image: url('@imgSource');" ></div>


