@using Microsoft.JSInterop


<h2>Exporting an image</h2>

<p>
    There are multiple ways of exporting a image to a Base64 string depending on your needs
</p>

<h3>Call Doodle Export</h3>

<p>
    The first way of exporting an image would be to call the export functionality on the reference
    of the Doodle object.
</p>

<pre>
    <code class="language-html">
        @("<div style=\"height: 50vh;\">")
    @("<DoodleDraw @ref=\"_doodleDraw\">")
        
    @("</DoodleDraw>")
@("</div>")
</code>
</pre>    

<pre>
    <code class="language-cs">
       @("@code") {
    private DoodleDraw _doodleDraw;

    // Called from a custom button click
    private async Task OnExportButtonClick() 
    {
        ...
        string base64Data = await _doodleDraw.ExportDoodleToImage();
        ...                
    }
}
    </code>
</pre>    

<h3>Doodle Export Event Callback</h3>

<p>
    The second way of exporting an image would be to set the callback event property on the Doodle.
</p>

<pre>
    <code class="language-html">
        @("<div style=\"height: 50vh;\">")
    @("<DoodleDraw @ref=\"_doodleDraw\" OnExportImage=\"RenderExportImage\">")
        
    @("</DoodleDraw>")
@("</div>")
    </code>
</pre>   

<pre>
    <code class="language-cs">
       @("@code") {
    private void RenderExportImage(string base64Image) 
    {
        ...
    }
}
    </code>
</pre>  

<h3>Export Image Handler</h3>

<p>
    The last way of exporting an image would be to create a custom export image handler. Below is an example 
    of creating such a handler
</p>

<pre>
    <code class="language-cs">
       
    namespace YourNamespace
    {
        public delegate void OnExportImageBase64Handler(object sender, string base64Image);

        public class MyExportHandler : Abstractions.Interfaces.IDoodleExportHandler
        {

            public event OnExportImageBase64Handler OnExportImageBase64;

            public Task ExportImageBase64(string base64ImageData)
            {
                OnExportImageBase64?.Invoke(this, base64ImageData);
                return Task.CompletedTask;
            }
        }

    }
       
    </code>
</pre>  

<p>Lastly, you need to register you export handler in the containers. This can be done when registering the Doodle Services</p>

<pre>
    <code class="language-cs">
      services.UseDoodle((config) => 
      {
          ...
      }, 
      exportHandler: () => new MyExportHandler(),
      ...
    }
    </code>
</pre> 

<h3>Export Options</h3>

<p>
    The Doodle component uses HTML2Canvas to render the canvas component to an Image and the export options used is defined in 
    the startup configuration. When calling the <b>ExportDoodleToImage</b> on the component directly, it can also be passed to this 
    method. The options correspond directly to the options on the HTML2Canvas Component and the help/documentation can be found there.
</p>

<pre>
    <code class="language-cs">
      services.UseDoodle((config) => 
      {
        ...
        config.Html2CanvasConfig = new Doodle.Abstractions.Config.Html2CanvasConfig()
        {
            ...
            UseCORS = true
            ...
        };
        ...
      }, 
      exportHandler: () => new MyExportHandler(),
      ...
    }
    </code>
</pre> 

<p>
    This is the HTML2Canvas Configuration structure with the defaults.
</p>

<pre>
    <code class="language-cs">
        public bool AllowTaint { get; set; } = true;

        public string BackgroundColor { get; set; } = null;

        public bool? ForeignObjectRendering { get; set; }

        public int? ImageTimeout { get; set; }

        public bool? Logging { get; set; }

        public string Proxy { get; set; } = null;

        public bool? RemoveContainer { get; set; }

        public bool UseCORS { get; set; } = true;

        public double? Scale { get; set; }

        public double? Width { get; set; }

        public double? Height { get; set; }

        public double? X { get; set; }

        public double? Y { get; set; }

        public double? ScrollX { get; set; }

        public double? ScrollY { get; set; }

        public double? WindowHeight { get; set; }

        public double? WindowWidth { get; set; }
    </code>
</pre> 


@code {

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("higlightCode");
    }

}
