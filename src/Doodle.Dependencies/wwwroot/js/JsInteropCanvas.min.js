export function RenderCanvasToImage(renderElement){var bufferId="88888";return html2canvas(renderElement).then(canvas=>{var renderedData=canvas.toDataURL("image/png");_jsStreamManager.AddBuffer(bufferId,renderedData)}),bufferId}export function ClearBufferedImage(bufferId){_jsStreamManager.RemoveBuffer(bufferId)}export function ReadBufferedImage(bufferId,fromIndex){return _jsStreamManager.ReadBuffer(bufferId,fromIndex)}export function BufferExists(id){return _jsStreamManager.BufferExists(id)}export function BufferLength(id){return _jsStreamManager.BufferLength(id)}import"./vendor.min.js";export const _jsStreamManager=new JsStreamManager;export class JsStreamBuffer{constructor(jsBufferName,base64Buffer){this._jsBufferName=jsBufferName;this.CreateArrayBuffer(base64Buffer)}get JsBufferName(){return this._jsBufferName}ReadBuffer(fromIndex){const totalLeft=Math.min(5120,this._buffer.byteLength-fromIndex);return new Uint8Array(this._buffer,fromIndex,totalLeft)}CreateArrayBuffer(base64Buffer){this._buffer=decode(base64Buffer)}BufferLength(){return this._buffer.byteLength}}export class JsStreamManager{constructor(){this._buffers=[]}AddBuffer(id,base64){const buffer=new JsStreamBuffer(id,base64);return this._buffers.push(buffer),id}RemoveBuffer(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);ix>=0&&this._buffers.splice(ix,1)}catch(ex){console.log(`Unable to remove buffer: ${ex}`)}}ReadBuffer(id,index){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return this._buffers[ix].ReadBuffer(index)}catch(ex){console.log(`Unable to remove buffer: ${ex}`)}return null}BufferExists(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return!0}catch(ex){}return!1}BufferLength(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return this._buffers[ix].BufferLength()}catch(ex){}return 0}}