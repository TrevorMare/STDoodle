export function RenderCanvasToImage(renderElement){_jsStreamManager==null&&(console.log(`Creating new JS Stream Manager Object`),_jsStreamManager=new JsStreamManager);const bufferId=Date.now().toString(18)+Math.random().toString(36).substring(2);return html2canvas(renderElement,{allowTaint:!0,useCORS:!0}).then(canvas=>{let renderedData=canvas.toDataURL("image/png");renderedData=renderedData.substring(renderedData.indexOf(",")+1);_jsStreamManager.AddBuffer(bufferId,renderedData)}),bufferId}export function ClearBufferedImage(bufferId){_jsStreamManager.RemoveBuffer(bufferId)}export function ReadBufferedImage(bufferId,fromIndex){return _jsStreamManager.ReadBuffer(bufferId,fromIndex)}export function ReadBufferedImageBase64(bufferId,fromIndex){return _jsStreamManager.ReadBufferBase64(bufferId,fromIndex)}export function BufferExists(id){return _jsStreamManager.BufferExists(id)}export function BufferLength(id){return _jsStreamManager.BufferLength(id)}import"./vendor.min.js";export let _jsStreamManager;export class JsStreamBuffer{constructor(jsBufferName,base64Buffer){this._jsBufferName=jsBufferName;this._base64Data=base64Buffer;this.CreateArrayBuffer(base64Buffer)}get JsBufferName(){return this._jsBufferName}ReadBufferBase64(fromIndex){try{const totalLeft=Math.min(5120,this._base64Data.length-fromIndex);return this._base64Data.substr(fromIndex,totalLeft)}catch(ex){return console.log(`JsStreamBuffer:ReadBuffer - Error reading buffer. ${ex}`),null}}ReadBuffer(fromIndex){try{const totalLeft=Math.min(5120,this._buffer.byteLength-fromIndex),result=new Uint8Array(this._buffer,fromIndex,totalLeft);return result.toString()}catch(ex){return console.log(`JsStreamBuffer:ReadBuffer - Error reading buffer. ${ex}`),null}}CreateArrayBuffer(base64Buffer){try{const arrayData=Uint8Array.from(atob(base64Buffer),c=>c.charCodeAt(0));this._buffer=arrayData.buffer}catch(ex){console.log(`JsStreamBuffer:CreateArrayBuffer: Error creating ArrayBuffer Object: ${ex}`)}}BufferLength(){try{return this._buffer.byteLength}catch(ex){return console.log(`JsStreamBuffer:BufferLength: Error reading ArrayBuffer length: ${ex}`),0}}}export class JsStreamManager{constructor(){this._buffers=[]}AddBuffer(id,base64){console.log(`Adding stream ${id} with length ${base64.length}`);const buffer=new JsStreamBuffer(id,base64);return this._buffers.push(buffer),console.log(`Current buffer count: ${this._buffers.length}`),id}RemoveBuffer(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);ix>=0&&this._buffers.splice(ix,1)}catch(ex){console.log(`Unable to remove buffer: ${ex}`)}}ReadBuffer(id,index){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return this._buffers[ix].ReadBuffer(index)}catch(ex){console.log(`Unable to read buffer: ${ex}`)}return null}ReadBufferBase64(id,index){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return this._buffers[ix].ReadBufferBase64(index)}catch(ex){console.log(`Unable to read buffer: ${ex}`)}return null}BufferExists(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return!0}catch(ex){console.log(`BufferExists: ${ex}`)}return!1}BufferLength(id){try{const ix=this._buffers.findIndex(b=>b.JsBufferName==id);if(ix>=0)return this._buffers[ix].BufferLength()}catch(ex){console.log(`BufferLength: ${ex}`)}return 0}}